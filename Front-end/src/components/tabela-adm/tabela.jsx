import React, { useState, useEffect } from 'react';
import { FaTimes } from 'react-icons/fa';
import {
  ScrollableTableContainer,
  TableContainer,
  TableHeader,
  TableBody,
  TableRow,
  TableCell,
  Title,
  Title2,
  TabContainer,
  Tab,
  ButtonContainer,
  ColumnRangeButton,
  SearchAndTabContainer,
  ModalContainer,
  PopupButton,
  ModalContent,
  ButtonClose,
  ButtonCloseContainer
} from './StyledTabela';

const Tabela = ({ darkMode }) => {
  const [colRange, setColRange] = useState(0);
  const [fakeData, setFakeData] = useState([]);
  const [activeButton, setActiveButton] = useState(1);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedColumns, setSelectedColumns] = useState([]);

  const columnNames = [
    "ID", "DSQFL", "DSQ", "Bairro", "Rua", "N√∫mero", "Tipo de Empreendimento", "√Årea Total", "Situa√ß√£o", "Restaurantes e Caf√©s",
    "Nome do Edif√≠cio", "N¬∫ de Pavimentos em Uso", "Disponibilidade", "Atividade de Funcionamento", "Grau de Risco", "Laudo", "Acessibilidade",
    "Picha√ß√£o", "Observa√ß√µes", "Propriet√°rio Localizado", "Investimento", "Qual Investimento", "Tributa√ß√£o", "Autoriza√ß√£o de Informa√ß√£o",
    "Propriet√°rio Cart√≥rio", "Propriet√°rio Campo", "Contato Propriet√°rio", "Coincid√™ncia Propriet√°rio", "Uso do Im√≥vel",
    "Valor do Aluguel", "Valor de Venda", "Latitude", "Longitude", "RGI", "Planta", "Planta Regional", "Judicializa√ß√£o",
    "Descri√ß√£o da Judicializa√ß√£o", "Observa√ß√µes", "Processos Abertos Desde 2018", "N√∫mero da Licen√ßa", "N√∫mero do Processo"
  ];


  const generateFakeData = (startId, endId) => {
    return Array.from({ length: endId - startId + 1 }, (_, index) => {
      const rowIndex = startId + index - 1;
      return columnNames.map((colName, colIndex) => {
        switch (colName) {
          case "ID":
            return rowIndex + 1;
          case "N√∫mero":
          case "Latitude":
          case "Longitude":
            return Math.random().toFixed(2);
          case "√Årea Total":
            return `${Math.floor(Math.random() * 1000)} m¬≤`;
          case "Rua":
            return `Rua ${rowIndex + 1}`;
          case "Situa√ß√£o":
            return ["Dispon√≠vel", "Abandonado", "Em Obra"][rowIndex % 3];
          case "Bairro":
            return ["Centro", "Santo Amaro", "Boa Vista"][rowIndex % 3];
          case "DSQ":
          case "DSQFL":
            return `DSQ-${Math.floor(Math.random() * 100)}`;
          case "Tipo de Empreendimento":
            return ["Residencial", "Comercial", "Misto"][rowIndex % 3];
          case "Restaurantes e Caf√©s":
            return Math.floor(Math.random() * 20);
          case "Nome do Edif√≠cio":
            return `Edif√≠cio ${rowIndex + 1}`;
          case "N¬∫ de Pavimentos em Uso":
            return Math.floor(Math.random() * 20) + 1;
          case "Disponibilidade":
            return ["Alugado", "Vago", "Reservado"][rowIndex % 3];
          case "Atividade de Funcionamento":
            return ["Funcionando", "Fechado", "Em Manuten√ß√£o"][rowIndex % 3];
          case "Grau de Risco":
            return ["Baixo", "M√©dio", "Alto"][rowIndex % 3];
          case "Laudo":
            return ["Aprovado", "Reprovado", "Pendente"][rowIndex % 3];
          case "Acessibilidade":
            return ["Acess√≠vel", "N√£o Acess√≠vel"][rowIndex % 2];
          case "Picha√ß√£o":
            return ["Sim", "N√£o"][rowIndex % 2];
          case "Observa√ß√µes":
            return `Observa√ß√£o ${rowIndex + 1}`;
          case "Propriet√°rio Localizado":
            return ["Sim", "N√£o"][rowIndex % 2];
          case "Investimento":
            return ["Sim", "N√£o"][rowIndex % 2];
          case "Qual Investimento":
            return `Investimento ${Math.floor(Math.random() * 100000)}`;
          case "Tributa√ß√£o":
            return ["Alta", "M√©dia", "Baixa"][rowIndex % 3];
          case "Autoriza√ß√£o de Informa√ß√£o":
            return ["Autorizado", "N√£o Autorizado"][rowIndex % 2];
          case "Propriet√°rio Cart√≥rio":
            return `Cart√≥rio ${rowIndex + 1}`;
          case "Propriet√°rio Campo":
            return `Campo ${rowIndex + 1}`;
          case "Contato Propriet√°rio":
            return `Contato ${rowIndex + 1}`;
          case "Coincid√™ncia Propriet√°rio":
            return ["Sim", "N√£o"][rowIndex % 2];
          case "Uso do Im√≥vel":
            return ["Comercial", "Residencial", "Misto"][rowIndex % 3];
          case "Valor do Aluguel":
          case "Valor de Venda":
            return `R$ ${Math.floor(Math.random() * 10000)}`;
          case "Latitude":
            return (Math.random() * 180 - 90).toFixed(6);
          case "Longitude":
            return (Math.random() * 360 - 180).toFixed(6);
          case "RGI":
            return `RGI-${Math.floor(Math.random() * 10000)}`;
          case "Planta":
            return ["Planta A", "Planta B", "Planta C"][rowIndex % 3];
          case "Planta Regional":
            return ["Regional A", "Regional B", "Regional C"][rowIndex % 3];
          case "Judicializa√ß√£o":
            return ["Sim", "N√£o"][rowIndex % 2];
          case "Descri√ß√£o da Judicializa√ß√£o":
            return `Descri√ß√£o ${rowIndex + 1}`;
          case "Observa√ß√µes":
            return `Outra observa√ß√£o ${rowIndex + 1}`;
          case "Processos Abertos Desde 2018":
            return Math.floor(Math.random() * 10);
          default:
            return `Dado ${colIndex + 1}-${rowIndex + 1}`;
        }
      });
    });
  };


  useEffect(() => {
    setFakeData(generateFakeData(1, 10));
  }, [colRange]);

  const handleColRangeChange = (rangeNumber) => {
    setActiveButton(rangeNumber);
    const startId = rangeNumber * 10 - 9;
    const endId = startId + 9;
    setFakeData(generateFakeData(startId, endId));
  };

  const handleTabChange = (rangeNumber) => {
    setColRange(rangeNumber);
  };

  const handleSearchInModal = (column) => {
    const newSelectedColumns = selectedColumns.includes(column)
      ? selectedColumns.filter((col) => col !== column)
      : [...selectedColumns, column];

    setSelectedColumns(newSelectedColumns);
  };

  const toggleModal = () => {
    setIsModalOpen((prevIsOpen) => !prevIsOpen);
  };
  const filterColumns = (row) => {
    return displayedColumnNames.map((colName) => row[columnNames.indexOf(colName)]);
  };

  const filterData = (data) => {
    return data.filter((row) =>
      row.some(
        (cell, cellIndex) =>
          cell !== null &&
          (selectedColumns.length > 0
            ? selectedColumns.includes(columnNames[colRange * 10 + cellIndex])
            : true) &&
          cell.toString().toLowerCase().includes(searchTerm.toLowerCase())
      )
    );
  };

  const startColIndex = colRange * 10;
  const endColIndex = Math.min(startColIndex + 10, columnNames.length);

  const displayedColumnNames = selectedColumns.length > 0 ? selectedColumns : columnNames.slice(startColIndex, endColIndex);
  const displayedData = filterData(fakeData).map(filterColumns);
  return (
    <>
      <Title darkMode={darkMode}>Registro de Im√≥veis</Title>

      <SearchAndTabContainer>
        <PopupButton onClick={toggleModal}>Filtros</PopupButton>

        <TabContainer darkMode={darkMode}>
          {[1, 2, 3, 4, 5].map(rangeNumber => (
            <Tab
              darkMode={darkMode}
              key={rangeNumber}
              isActive={colRange === rangeNumber - 1}
              onClick={() => handleTabChange(rangeNumber - 1)}
            >
              T {rangeNumber}
            </Tab>
          ))}
        </TabContainer>
      </SearchAndTabContainer>

      <ModalContainer darkMode={darkMode} isOpen={isModalOpen}>
        <Title2 darkMode={darkMode}>Filtros</Title2>
        <ModalContent darkMode={darkMode}>
          <input
            type="text"
            placeholder="üîç Pesquisar..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            darkMode={darkMode}
          />
          {columnNames.map((colName, index) => (
            <label key={index} darkMode={darkMode}>
              <input
                darkMode={darkMode}
                type="checkbox"
                checked={selectedColumns.includes(colName)}
                onChange={() => handleSearchInModal(colName)}
              /> {colName}
            </label>
          ))}
        </ModalContent>
        <ButtonCloseContainer darkMode={darkMode}>
          <ButtonClose darkMode={darkMode} onClick={toggleModal}>
            <FaTimes />
          </ButtonClose>
        </ButtonCloseContainer>
      </ModalContainer>

      <ScrollableTableContainer>
        <TableContainer darkMode={darkMode}>
          <table>
            <TableHeader darkMode={darkMode}>
              <tr>
                {displayedColumnNames.map((name, index) => (
                  <TableCell darkMode={darkMode} key={index}>{name}</TableCell>
                ))}
              </tr>
            </TableHeader>

            <TableBody darkMode={darkMode}>
              {displayedData.map((row, rowIndex) => (
                <TableRow key={rowIndex} darkMode={darkMode}>
                  {row.map((cell, cellIndex) => (
                    <TableCell darkMode={darkMode} key={cellIndex}>
                      {cell}
                    </TableCell>
                  ))}
                </TableRow>
              ))}
            </TableBody>
          </table>
        </TableContainer>
      </ScrollableTableContainer>
      <ButtonContainer>
        {[1, 2, 3, 4, 5].map(rangeNumber => (
          <ColumnRangeButton
            darkMode={darkMode}
            key={rangeNumber}
            isActive={activeButton === rangeNumber}
            onClick={() => handleColRangeChange(rangeNumber)}
          >
            {rangeNumber}
          </ColumnRangeButton>
        ))}
      </ButtonContainer>
    </>
  );
};

export default Tabela;